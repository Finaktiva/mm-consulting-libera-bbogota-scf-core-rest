getInvoiceProviderById:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}get-invoice-provider.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_INVOICE_PROVIDER_ENV}
    events:
      - http:
          method: get
          path: providers/{enterpriseId}/invoices/{invoiceId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: 
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getAllProviderNegotiations:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}list-provider-negotiations.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_PROVIDER_NEGOTIATIONS_ENV}
    events:
      - http:
          method: get
          path: providers/{enterpriseId}/invoices
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: 
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getProviderInvoiceNegotiations:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}get-invoice-negotiations.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_PROVIDER_INVOICE_NEGOTIATIONS_ENV}
    events:
      - http:
          method: get
          path: providers/{enterpriseId}/invoices/{invoiceId}/discount-negotiations
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
                  negotiationId: true
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: 
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
updateProviderInvoiceNegotiationById:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}update-invoice-negotiation.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):UPDATE_NEGOTIATION_ENV}
    events:
      - http:
          method: put
          path: providers/{enterpriseId}/invoices/{invoiceId}/discount-negotiations/{negotiationId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
                  negotiationId: true
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: 
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
prvUpdateNegotiationStatus:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}update-payment-status.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):PROVIDER_UPDATE_PAYMENT_STATUS_ENV}
    events:
      - http:
          method: patch
          path: providers/{enterpriseId}/invoices/{invoiceId}/payment-confirmation
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
                  negotiationId: true
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: 
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer     
getPaymentDetail:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}get-payment-detail.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_PROVIDER_INVOICE_PAYMENT_ENV}
    events:
      - http:
          method: get
          path: providers/{enterpriseId}/invoices/{invoiceId}/payment
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: 
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getProviderBulkInvoiceNegotiations:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}get-provider-bulk-invoice-negotiations.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_PROVIDER_INVOICE_BULK_NEGOTIATIONS_ENV}
    events:
      - http:
          method: get
          path: providers/{enterpriseId}/invoices/bulk-discount-negotiations
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer: 
            type: CUSTOM
            authorizerId:
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getProviderBulkInvoiceNegotiationById:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}get-provider-bulk-invoice-negotiation-detail.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_PROVIDER_INVOICE_BULK_NEGOTIATION_ENV}
    events:
      - http:
          method: get
          path: providers/{enterpriseId}/invoices/bulk-discount-negotiations/{bulkNegotiationId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  bulkNegotiationId: true
          cors: true
          authorizer: 
            type: CUSTOM
            authorizerId:
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
prvUpdateInvoiceBulkNegotiationStatus:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}update-invoice-bulk-negotiation-status.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):UPDATE_INVOICE_BULK_NEGOTIATION_STATUS_ENV}
    events:
      - http:
          method: put
          path: providers/{enterpriseId}/invoices/bulk-discount-negotiations/{bulkNegotiationId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  bulkNegotiationId: true
          cors: true
          authorizer: 
            type: CUSTOM
            authorizerId:
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getProviderContactInformation:
    handler: ${self:custom.prefix_module, 'src/functions/providers/'}get-contact-information.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_CONTACT_INFORMATION_ENV}
    events:
      - http:
          method: get
          path: providers/{enterpriseId}/contact-information
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer: 
            type: CUSTOM
            authorizerId:
              'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer