getInvoiceNegotiationRecord:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-invoice-negotiation-record.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_INVOICE_NEGOTIATION_RECORD_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/invoices/{invoiceId}/discount-negotiations/{negotiationId}/record
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
createInvoice:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}create-enterprise-invoice.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):CREATE_ENTERPRISE_INVOICE_ENV}
    events:
      - http:
          method: post
          path: payers/{enterpriseId}/invoices
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
deleteInvoice:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}delete-enterprise-invoice.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):DELETE_ENTERPRISE_INVOICE}
    events:
      - http:
          method: delete
          path: payers/{enterpriseId}/invoices/{invoiceId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getEnterpriseInvoices:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}list-enterprise-invoices.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_ENTERPRISE_INVOICES_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/invoices
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getInvoiceById:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}list-enterprise-invoice.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_INVOICE_BY_ID_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/invoices/{invoiceId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
updateProviderInvoice:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}update-enterprise-invoice-provider.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):UPDATE_INVOICE_PROVIDER_ENV}
    events:
      - http:
          method: put
          path: payers/{enterpriseId}/invoices/{invoiceId}/provider
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
createNewInvoiceNegotiation:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}create-invoice-negotiation.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):CREATE_INVOICE_NEGOTIATION_ENV}
    events:
      - http:
          method: post
          path: payers/{enterpriseId}/invoices/{invoiceId}/discount-negotiations
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getInvoiceNegotiations:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-invoice-negotiations.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_INVOICE_NEGOTIATIONS_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/invoices/{invoiceId}/discount-negotiations
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
cancelInvoiceNegotiation:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}delete-cancel-invoice-negotiation.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):DELETE_CANCEL_INVOICE_NEGOTIATION_ENV}
    events:
      - http:
          method: delete
          path: payers/{enterpriseId}/invoices/{invoiceId}/discount-negotiations/{negotiationId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
                  negotiationId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
updateInvoiceNegotiationById:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}update-invoice-negotiation.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):UPDATE_NEGOTIATION_ENV}
    events:
      - http:
          method: put
          path: payers/{enterpriseId}/invoices/{invoiceId}/discount-negotiations/{negotiationId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
                  negotiationId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
invoicesBulkLoadCtrl:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}invoices-bulk-load.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):INVOICE_BULK_LOAD_ENV}
    events:
      - http:
          method: post
          path: payers/{enterpriseId}/invoices/bulk-loads
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getEnterpriseBulkUploadStatus:
  handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-enterprise-bulk-upload-status.handler
  environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_ENTERPRISE_BULK_UPLOAD_STATUS}
  events:
    - http:
        method: get
        path: payers/{enterpriseId}/invoices/bulk-loads
        request:
            parameters:
              paths:
                enterpriseId: true
        cors: true
        authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getInvoiceBulkLoadDetails:
  handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-invoice-bulk-load-detail.handler
  environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_INVOICE_BULK_LOAD_DETAIL_ENV}
  events:
    - http:
        method: get
        path: payers/{enterpriseId}/invoices/bulk-loads/{invoiceBulkId}
        request:
            parameters:
              paths:
                enterpriseId: true
                invoiceBulkId: true
        cors: true
        authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getInvoiceFundingRequest:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-invoice-funding-request.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_INVOICE_FUNDING_REQUEST_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/invoices/{invoiceId}/funding-requests
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
createNewFundingRequest:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}create-funding-request.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):CREATE_FUNDING_REQUEST_ENV}
    events:
      - http:
          method: post
          path: payers/{enterpriseId}/invoices/{invoiceId}/funding-requests
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer:
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getInvoiceFundingRequestRecord:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-invoice-funding-request-record.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_INVOICE_FUNDING_REQUEST_RECORD_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/invoices/{invoiceId}/funding-requests/{requestId}/record
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
                  requestId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
getQuotaRequests:
  handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-quota-requests.handler
  environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_QUOTA_REQUESTS_ENV}
  events:
    - http:
        method: get
        path: payers/{enterpriseId}/quota-requests
        request:
            parameters:
                paths:
                  enterpriseId: true
        cors: true
        authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer

updateQuotaRequestStatus:
  handler: ${self:custom.prefix_module, 'src/functions/payers/'}update-quota-request-status.handler
  environment: ${file(${self:custom.rootDir}properties/variables.yml):UPDATE_QUOTA_REQUEST_STATUS_ENV}
  events:
    - http:
        method: patch
        path: payers/{enterpriseId}/quota-requests/{quotaRequestId}/status
        request:
            parameters:
                paths:
                  enterpriseId: true
                  quotaRequestId: true
        cors: true
        authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
              
getEnterpriseLenders:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-enterprise-lenders.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_ENTERPRISE_LENDER_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/lenders
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer

createQuotaRequest:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}create-quota-request.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):POST_CREATE_QUOTA_REQUEST_ENV}
    events:
      - http:
          method: post
          path: payers/{enterpriseId}/lenders/{lenderId}/quota-requests
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
        
requestQuotaAdjustment:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}request-quota-adjustment.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):POST_REQUEST_QUOTA_ADJUSTMENT_ENV}
    events:
      - http:
          method: post
          path: payers/{enterpriseId}/lenders/{lenderId}/quota/adjustment-request
          request:
              parameters:
                paths:
                  enterpriseId: true
                  lenderId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer

updateLenderInvoice:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}update-enterprise-invoice-lender.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):UPDATE_INVOICE_LENDER_ENV}
    events:
      - http:
          method: put
          path: payers/{enterpriseId}/invoices/{invoiceId}/lender
          request:
              parameters:
                paths:
                  enterpriseId: true
                  invoiceId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer

getAllPayerBulkDiscountNegotiations:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}list-bulk-discount-negotiations.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_BULK_DISCOUNT_NEGOTIATIONS_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/invoices/bulk-discount-negotiations
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer:
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer

createNewBulkInvoiceNegotiation:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}create-bulk-invoice-negotiation.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):POST_BULK_DISCOUNT_NEGOTIATIONS_ENV}
    events:
      - http:
          method: post
          path: payers/{enterpriseId}/invoices/bulk-discount-negotiations
          request:
              parameters:
                paths:
                  enterpriseId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer
               
getPayerBulkDiscountNegotiationById:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}get-invoices-bulk-negotiation-detail.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):GET_INVOICE_BULK_NEGOTIATIONS_DETAIL_ENV}
    events:
      - http:
          method: get
          path: payers/{enterpriseId}/invoices/bulk-discount-negotiations/{bulkNegotiationId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  bulkNegotiationId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer

cancelBulkInvoiceNegotiation:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}delete-cancel-invoice-bulk-negotiation.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):DELETE_CANCEL_INVOICE_BULK_NEGOTIATION_ENV}
    events:
      - http:
          method: delete
          path: payers/{enterpriseId}/invoices/bulk-discount-negotiations/{bulkNegotiationId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  bulkNegotiationId: true
          cors: true
          authorizer: 
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer

updateInvoiceBulkNegotiationById:
    handler: ${self:custom.prefix_module, 'src/functions/payers/'}update-invoices-bulk-negotiation.handler
    environment: ${file(${self:custom.rootDir}properties/variables.yml):UPDATE_INVOICE_BULK_NEGOTIATION_ENV}
    events:
      - http:
          method: put
          path: payers/{enterpriseId}/invoices/bulk-discount-negotiations/{bulkNegotiationId}
          request:
              parameters:
                paths:
                  enterpriseId: true
                  bulkNegotiationId: true
          cors: true
          authorizer:
             type: CUSTOM
             authorizerId:
               'Fn::ImportValue': libera-${self:provider.stage}-basic-authorizer